$viewEnclosureTool.top()
    console.log('ReservationTableScript was fetched');
    require(["dojo/store/Memory", "dojo/dom-construct", "dojo/date", "dojo/date/locale",
            "dojo/_base/array", "hotelms/TableCell",
            "dojo/ready","dojo/dom-class", "dojo/dom", "dojo/request"],
            function(Memory, domConstruct, date, locale, array, TableCell, ready, domClass, dom, request){
                // use ready and not domReady! because I want to operate after widgets are initialized
            ready(function(){

                var createTableCells = function(fromDate, toDate)
                {
                    var tds = [];
                    var numberOfDays = date.difference(fromDate, toDate, "day");
                    tds.push(new TableCell()); // cell for room
                    for(var i = 0 ; i < numberOfDays ; ++i)
                    {
                        var calculatedDate = date.add(fromDate, "day", i);
                        var tableCell = new TableCell({cellDate : calculatedDate});
                        console.log(tableCell.cellDate );
                        if (i == 0)
                        {
                            tableCell.isFirst = true;
                        }

                        tds.push(tableCell);
                    }
                    return tds;
                }
                // modify store date
                var parseDataToJSTypes = function(store)
                {
                    var localeParserOptions = {datePattern: "yyyy-MM-dd" , selector : "date"};
                    store.query().forEach(function(room){
                        array.forEach(room.reservations, function(reservation){
                            parseReservationDateToJSDate(reservation, localeParserOptions)
                        });
                    });
                }

                var parseReservationDateToJSDate = function(reservation, localeParserOptions)
                {
                    reservation.from = locale.parse(reservation.from, localeParserOptions);
                    reservation.to = locale.parse(reservation.to, localeParserOptions);
                }

                // returns colgroup
                var buildColgroupDOM = function(fromDate, toDate)
                {
                    var numberOfDays = date.difference(fromDate, toDate, "day");
                    var todayIndex = date.difference(fromDate, new Date(), "day");
                    var colgroup = domConstruct.create("colgroup");
                    for(var i = 1 ; i < numberOfDays + 2 ; ++i)
                    {
                        var col = domConstruct.create("col");
                        if (i == todayIndex)
                        {
                            domClass.add(col, "today");
                        }
                        domConstruct.place(col, colgroup, "last");
                    }
                    console.log(colgroup);
                    return colgroup;
                }

                // returns dom thead element with row and table headers
                // TODO
                // adding 'today' class might be redundant as adding it to specific col does the job.
                // Consider what to do...
                var buildTableHeaderDOM = function(fromDate, toDate, localeParserOptions)
                {
                    var header = domConstruct.create("thead");
                    var headerRow = domConstruct.create("tr");
                    var numberOfDays = date.difference(fromDate, toDate, "day");
                    var todayIndex = date.difference(fromDate, new Date(), "day");

                    var firstHeader = domConstruct.toDom("<th>Room</th>");
                    domConstruct.place(firstHeader, headerRow, "first");

                    // todo check if is today and add appropriate class
                    for(var i = 0 ; i < numberOfDays ; ++i)
                    {
                        var calculatedDate = date.add(fromDate, "day", i);
                        var th = domConstruct.create("th");
                        if (i == todayIndex)
                        {
                            domClass.add(th, "today");
                        }
                       th.innerHTML = locale.format(calculatedDate, localeParserOptions);
                       domConstruct.place(th, headerRow, "last");
                    }
                    domConstruct.place(headerRow, header, "first");
                    return header;
                }

                var builder = function(from, to, store)
                {
                    var localeParserOptions = {datePattern: "yyyy-MM-dd" , selector : "date"};
                    var fromDate = locale.parse(from, localeParserOptions);
                    var toDate = locale.parse(to, localeParserOptions);

                    var colgroupDOM = buildColgroupDOM(fromDate, toDate);
                    var theadDOM = buildTableHeaderDOM(fromDate, toDate, localeParserOptions);
                    console.log("theadDOM");
                    console.log(theadDOM);
                    var table = domConstruct.create("table");
                    domClass.add(table, "reservation-table");
                    domConstruct.place(colgroupDOM, table, "last");
                    domConstruct.place(theadDOM, table, "last");

                    var tableBody = domConstruct.create("tbody");

                    store.query().forEach(function(room){
                        // create empty cells each with its Date initialized
                        var tableCells = createTableCells(fromDate, toDate);
                        console.log(tableCells);

                        // iterate over cells and reservations to set cells with reservation data
                        array.forEach(tableCells, function(tableCell, i){
                            if(i == 0)
                            {
                                tableCell.setRoom(room.room);
                            }
                            else
                            {
                                array.forEach(room.reservations, function(reservation, j){
                                    if(tableCell.belongsTo(reservation))
                                    {
                                        tableCell.addReservation(reservation);
                                    }
                                    console.log("reservation iteration " + j);
                                });
                            }
                            console.log("tableCell iteration " + i);
                        });
                        // cells are now in correct state and should be able to build DOM td element
                        var tr = domConstruct.create("tr");
                        array.forEach(tableCells, function(tableCell){
                            var td = tableCell.buildTdDOM();
                            domConstruct.place(td, tr, "last");
                        });
                        domConstruct.place(tr, tableBody, "last");
                    });
                    domConstruct.place(tableBody, table, "last");
                    return table;
                }
                request("$link.view('ReservationData')", {handleAs : 'json'}).then(function(reservationsData){
                    var store = new Memory({data : reservationsData.reservations, idProperty : "room"});
                    parseDataToJSTypes(store);

                    console.log(store);
                    console.log(new TableCell());
                    var asd = new TableCell({ cellDate : new Date()});
                    console.log(asd);
                    console.log(asd.cellDate);
                    // creates one or more td depending on reservation...
                    // overbooking cannot be handled..

                    buildedTableDOM = builder(reservationsData.from, reservationsData.to, store);
                    domConstruct.place(buildedTableDOM, dom.byId("dynamicReservationTable"), "last");
                });
            });
});

